{"version":3,"file":"react-simple-auth.umd.js","sources":["../src/react-simple-auth.ts"],"sourcesContent":["const sessionKey = 'session'\n\nexport interface IProvider<T> {\n  buildAuthorizeUrl(requestKey: string): string\n  extractError(redirectUrl: string): Error | undefined\n  extractSession(redirectUrl: string): T\n  validateSession(session: T): boolean\n  getAccessToken(session: T, resourceId: string): string\n  getSignOutUrl(redirectUrl: string): string\n}\n\nexport interface IAuthenticationService {\n  acquireTokenAsync<T>(\n    provider: IProvider<T>,\n    storage?: Storage,\n    localWindow?: Window\n  ): Promise<T>\n  restoreSession<T>(provider: IProvider<T>, storage?: Storage): T | undefined\n  invalidateSession(storage?: Storage): void\n  getAccessToken<T>(\n    provider: IProvider<T>,\n    resourceId: string,\n    storage?: Storage\n  ): string\n}\n\nexport const service: IAuthenticationService = {\n  acquireTokenAsync<T>(\n    provider: IProvider<T>,\n    storage: Storage = window.localStorage,\n    localWindow: Window = window\n  ): Promise<T> {\n    // Create unique request key\n    const requestKey = `react-simple-auth-request-key-${guid()}`\n\n    // Create new window set to authorize url, with unique request key, and centered options\n    const [width, height] = [500, 500]\n    const windowOptions = {\n      width,\n      height,\n      left:\n        Math.floor(screen.width / 2 - width / 2) +\n        ((screen as any).availLeft || 0),\n      top: Math.floor(screen.height / 2 - height / 2)\n    }\n\n    const oauthAuthorizeUrl = provider.buildAuthorizeUrl(requestKey)\n    const stateMatch = oauthAuthorizeUrl.match(/state=([^&]+)/)\n    if (!stateMatch || stateMatch[1] !== requestKey) {\n      throw new Error(\n        'React Simple Auth: state search parameter needs to be set using the generated requestKey'\n      )\n    }\n\n    const windowOptionString = Object.entries(windowOptions)\n      .map(([key, value]) => `${key}=${value}`)\n      .join(',')\n    const loginWindow = localWindow.open(\n      oauthAuthorizeUrl.toString(),\n      requestKey,\n      windowOptionString\n    )\n\n    return new Promise<any>((resolve, reject) => {\n      // Poll for when the is closed\n      const checkWindow = (loginWindow: Window) => {\n        // If window is still open check again later\n        if (!loginWindow.closed) {\n          setTimeout(() => checkWindow(loginWindow), 100)\n          return\n        }\n\n        const redirectUrl = storage.getItem(requestKey)\n        storage.removeItem(requestKey)\n\n        // Window was closed, but never reached the redirect.html due to user closing window or network error during authentication\n        if (typeof redirectUrl !== 'string' || redirectUrl.length === 0) {\n          reject(\n            new Error(\n              `React Simple Auth: Login window was closed by the user or authentication was incomplete and never reached final redirect page.`\n            )\n          )\n          return\n        }\n\n        // Window was closed, and reached the redirect.html; however there still might have been error during authentication, check url\n        const error = provider.extractError(redirectUrl)\n        if (error) {\n          reject(error)\n          return\n        }\n\n        // Window was closed, reached redirect.html and correctly added tokens to the url\n        const session = provider.extractSession(redirectUrl)\n        storage.setItem(sessionKey, JSON.stringify(session))\n        resolve(session)\n      }\n\n      checkWindow(loginWindow)\n    })\n  },\n\n  restoreSession<T>(\n    provider: IProvider<T>,\n    storage: Storage = window.localStorage\n  ): T | undefined {\n    const sessionString = storage.getItem(sessionKey)\n    if (typeof sessionString !== 'string' || sessionString.length === 0) {\n      return undefined\n    }\n\n    const session: T = JSON.parse(sessionString)\n\n    if (!provider.validateSession(session)) {\n      storage.removeItem(sessionKey)\n      return undefined\n    }\n\n    return session\n  },\n\n  invalidateSession(storage: Storage = window.localStorage): void {\n    storage.removeItem(sessionKey)\n  },\n\n  getAccessToken<T>(\n    provider: IProvider<T>,\n    resourceId: string,\n    storage: Storage = window.localStorage\n  ): string {\n    const sessionString = storage.getItem(sessionKey)\n    if (typeof sessionString !== 'string' || sessionString.length === 0) {\n      throw new Error(\n        `You attempted to get access token for resource id: ${resourceId} from the session but the session did not exist`\n      )\n    }\n\n    const session: T = JSON.parse(sessionString)\n\n    return provider.getAccessToken(session, resourceId)\n  }\n}\n\nexport default service\n\nfunction guid(): string {\n  let d = new Date().getTime()\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(\n    c: string\n  ) {\n    let r = ((d + Math.random() * 16) % 16) | 0\n    d = Math.floor(d / 16)\n    return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16)\n  })\n}\n"],"names":[],"mappings":"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"}